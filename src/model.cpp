// Author: Dimitrios Tzionas
//
// source code for the work:
//
// Dimitrios Tzionas and Juergen Gall
// 3D Object Reconstruction from Hand-Object Interactions
// International Conference on Computer Vision (ICCV) 2015
// http://files.is.tue.mpg.de/dtzionas/In-Hand-Scanning


#include "model.h"

Model::Model(){}

Model::Model(   QString INPUT_BasePath,
                QString INPUT_dynamicStringPart,
                QString INPUT_fileNameOhneExtension,
                QString INPUT_EXTENSSS_Mesh,
                QString INPUT_EXTENSSS_Skeleton,
                QString INPUT_EXTENSSS_Skin            )
{

        QString fileString_Mesh     = INPUT_BasePath + INPUT_dynamicStringPart + INPUT_fileNameOhneExtension + INPUT_EXTENSSS_Mesh;
        QString fileString_Skeleton = INPUT_BasePath + INPUT_dynamicStringPart + INPUT_fileNameOhneExtension + INPUT_EXTENSSS_Skeleton;
        QString fileString_Skin     = INPUT_BasePath + INPUT_dynamicStringPart + INPUT_fileNameOhneExtension + INPUT_EXTENSSS_Skin;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        pcl::PointCloud<pcl::PointXYZRGBNormal>::Ptr   PCL_tmp(new pcl::PointCloud<pcl::PointXYZRGBNormal> );
                                                 //////////////
                                                 PCL = PCL_tmp;
                                                 //////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        name = INPUT_fileNameOhneExtension;
        ////////////////////////////////////////////////////
        if (name.contains("Hand"))     has_OnlySkin = true;
        else                           has_OnlySkin = false;
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        isRenderable = true;
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        totalBones          = 0;
        totalSkeletonFrames = 0;
        totalSkinningBones  = 0;
        totalTriangles      = 0;
        totalVertices       = 0;
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        readSkeleton( fileString_Skeleton );
                                                                    //print_SkeletonBones();
        readMesh_OFF( fileString_Mesh     );
                                                                    //print_Mesh_Vertices();
                                                                    //print_Mesh_Triangles();
        readSkin_TXT( fileString_Skin     );
                                                                    //print_SkinningWeights();
                                                                    //print_SkinningBones();

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        create_Lookup_SkinningBone_to_Bones_ID();                   //print_SkinningBoneNames();
                                                                    //test_Lookup_SkinningBone_to_Bones_ID();

        create_thresholded_SkinningWeights();                       //print_thresholded_SkinningWeights();
                                                                    //test_SkinningWeihgts_sum_to_1();

        create_Vertices_DominantSkinningBone();                     //print_Vertices_DominantSkinningBone();

        create_Lookup_KinematicChain_AllBones();                    //print_Lookup_KinematicChain_AllBones();
        create_Lookup_KinematicChain_SkinnBones_2_SkinnBones();     //print_Lookup_KinematicChain_SkinnBones_2_SkinnBones();


        create_VerticesMainlyInfluenced_PerSkinningBone();          //print_VerticesMainlyInfluenced_PerSkinningBone();


                                                                    //vertexBelongsToEndEffector_TEST();

}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



bool Model::vertexBelongsToEndEffector( int vertexID )
{
    int skkk = mesh.vertices_dominantSkinningBone[vertexID].skinningBoneID;

    int bbb = lookup_SkinningBone_to_Bones_ID[skkk];

    return (skeleton.bones[bbb].childrenVector.size() == 0);
}



void Model::vertexBelongsToEndEffector_TEST()
{
    for (int vvv=0; vvv<totalVertices; vvv++)
    {
            std::cout << vertexBelongsToEndEffector_TEST( vvv ).toStdString() << std::endl;
    }
}



QString Model::vertexBelongsToEndEffector_TEST( int vertexID )
{
        int vvv = vertexID;

        int skkk = mesh.vertices_dominantSkinningBone[vvv].skinningBoneID;

        return QString( QString("Model::vertexBelongsToEndEffector_TEST") + "   \t" + QString::number(vertexBelongsToEndEffector(vvv)) + "   \t" + skinningSkeleton.skinningBones[skkk].name);
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


