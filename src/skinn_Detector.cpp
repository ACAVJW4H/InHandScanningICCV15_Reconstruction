// Author: Dimitrios Tzionas
//
// source code for the work:
//
// Dimitrios Tzionas and Juergen Gall
// 3D Object Reconstruction from Hand-Object Interactions
// International Conference on Computer Vision (ICCV) 2015
// http://files.is.tue.mpg.de/dtzionas/In-Hand-Scanning


#include "skinndetector.h"


SkinnDetector::SkinnDetector()
{
    /////////////////////////////////////  Don't change order !!!
    PARAM_NUMBBB_Mixture_Components = 16;
    /////////////////////////////////////
    PARAM_THRESH_Ratio = -1.500;
    ////////////////////////////
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


cv::Mat    SkinnDetector::compute_SkinnBinMap_4_Image( const cv::Mat &currFrame_RGB_RAW_CV, const cv::Mat &currFrame_DDD_RAW_CV, double PARAM_THRESH_Ratio_IN, bool skipInvalidDepthFLAG, bool printFLAG, bool displayFLAG )
{

        ///////////////////////////////////////////
        PARAM_THRESH_Ratio = PARAM_THRESH_Ratio_IN;
        ///////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        cv::Mat logRatio_map_RAWW = compute_LogRatioMap_4_Image( currFrame_RGB_RAW_CV,
                                                                 currFrame_DDD_RAW_CV, skipInvalidDepthFLAG, printFLAG, displayFLAG );
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        cv::Mat logRatio_map_BIN = cv::Mat::zeros(logRatio_map_RAWW.rows,logRatio_map_RAWW.cols,CV_8UC1);

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        for     (int iii=0; iii<logRatio_map_RAWW.rows; iii++)
        {   for (int jjj=0; jjj<logRatio_map_RAWW.cols; jjj++)
            {
                if (logRatio_map_RAWW.at<double>(iii,jjj) > PARAM_THRESH_Ratio)
                {
                    logRatio_map_BIN.at<uchar>(iii,jjj) = 255;
                }
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (displayFLAG)
        {
            cv::imshow("logRatio_map_BIN",logRatio_map_BIN  );
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////
        return logRatio_map_BIN;
        ////////////////////////

}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


cv::Mat SkinnDetector::compute_LogRatioMap_4_Image( const cv::Mat &currFrame_RGB_RAW_CV, const cv::Mat &currFrame_DDD_RAW_CV, bool skipInvalidDepthFLAG, bool printFLAG, bool displayFLAG )
{

        cv::Mat logRatio_map_RAWW = cv::Mat::zeros(currFrame_RGB_RAW_CV.rows,currFrame_RGB_RAW_CV.cols,CV_64FC1);
        cv::Mat logRatio_map_DISP = cv::Mat::zeros(currFrame_RGB_RAW_CV.rows,currFrame_RGB_RAW_CV.cols,CV_64FC1);
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        for     (int iii=0; iii<logRatio_map_RAWW.rows; iii++)
        {   for (int jjj=0; jjj<logRatio_map_RAWW.cols; jjj++)
            {

                    if (skipInvalidDepthFLAG  &&  currFrame_DDD_RAW_CV.at<float>(iii,jjj) == 0) // from YML file
                    {
                        logRatio_map_RAWW.at<double>(iii,jjj) = -999999; // so that is far below THRESH

                        /////////
                        continue;
                        /////////
                    }

                    /////////////////////////////////////
                    logRatio_map_RAWW.at<double>(iii,jjj) = compute_LogRatioMap_4_Pixel(  currFrame_RGB_RAW_CV.at<cv::Vec3b>(iii,jjj), printFLAG  ); // LogRatio - will have useful negative values !!!
                    /////////////////////////////////////
            }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (displayFLAG)
        {

                double minn, maxx;
                ///////////////////////////////////////////////////////////////
                ///////////////////////////////////////////////////////////////
                cv::minMaxIdx( currFrame_DDD_RAW_CV,         &minn,    &maxx );
                cv::Mat                         DEPTH_VIZ;
                currFrame_DDD_RAW_CV.convertTo( DEPTH_VIZ, CV_8UC1, 255/maxx );
                //////////////////////////////////////////////////////////////////////////////////////////////
                //////////////////////////////////////////////////////////////////////////////////////////////
                cv::minMaxIdx( logRatio_map_RAWW,                                          &minn,     &maxx );
                               logRatio_map_RAWW.convertTo( logRatio_map_DISP,  CV_8UC1,  255/maxx );
                //////////////////////////////////////////////////////////////////////////////////////////////
                //////////////////////////////////////////////////////////////////////////////////////////////

                ///////////////////////////
                logRatio_map_DISP += 15; // for visibility
                ///////////////////////////

                cv::imshow("logRatio_map_DISP",    logRatio_map_DISP   );
                cv::imshow("logRatio_map_INP_RGB",currFrame_RGB_RAW_CV );
              //cv::imshow("logRatio_map_INDDD",      DEPTH_VIZ        );

              //std::cout << "============== SkinnDetector::compute_LogRatioMap_4_Image ==========" << "\t" << minn << "\t(" << PARAM_THRESH_Ratio << ")\t" << maxx << std::endl;

        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        ////////////////////////////
        return logRatio_map_RAWW; // LogRatio - will have useful negative values !!!
        ////////////////////////////

}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


double SkinnDetector::compute_LogRatioMap_4_Pixel( const cv::Vec3b pixelBGR, bool printFLAG )
{
    double skinnProb_POS   = 0;
    double skinnProb_NEG   = 0;
    double skinnProb_RATIO = 0;

    for (int mmm=0; mmm<PARAM_NUMBBB_Mixture_Components; mmm++) // page 10 @ paper
    {
        skinnProb_POS += modelSkinn_POS[mmm].computeProbability( pixelBGR );
        skinnProb_NEG += modelSkinn_NEG[mmm].computeProbability( pixelBGR );
    }

    ///////////////////////////////////////////////////////////////
    skinnProb_RATIO = log( skinnProb_POS / (1e-10+skinnProb_NEG) ); // stupid tiny constant to avoid division by zero
    ///////////////////////////////////////////////////////////////

    if (printFLAG)   std::cout << "SkinnDetector::compute_LogRatioMap_4_Pixel~~~" << "\t\t" << skinnProb_POS << "\t\t" << skinnProb_NEG << "\t\t**" << skinnProb_RATIO << "**\t\t" << std::endl;

    ///////////////////////
    return skinnProb_RATIO;
    ///////////////////////
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
