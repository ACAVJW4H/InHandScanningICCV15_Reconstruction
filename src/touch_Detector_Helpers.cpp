// Author: Dimitrios Tzionas
//
// source code for the work:
//
// Dimitrios Tzionas and Juergen Gall
// 3D Object Reconstruction from Hand-Object Interactions
// International Conference on Computer Vision (ICCV) 2015
// http://files.is.tue.mpg.de/dtzionas/In-Hand-Scanning


#include <touch.h>




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


bool Touch::correspondencesFinder_SKIN_ENSURE_2_FINGs()
{
        return  (skinTouch_countDiffFingers_COMMON() >= PARAM_SKIN_minTouchingFINGs);
}


int Touch::skinTouch_countDiffFingers_COMMON()
{

        /////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////
        for (int iii=0; iii<touchingFinger_COUNTer.size(); iii++)
        {
            touchingFinger_COUNTer[iii].counter           =  0;
            touchingFinger_COUNTer[iii].fingID            = -1;
            touchingFinger_COUNTer[iii].globalFingID      = -1;
            touchingFinger_COUNTer[iii].modelID           = -1;
            touchingFinger_COUNTer[iii].name_skinningBone = "";
            touchingFinger_COUNTer[iii].skinningBoneID    = -1;
            touchingFinger_COUNTer[iii].signedDist        =  0;
        }
        /////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////


        for (int ccc=0; ccc<myTouchCorrespSKIN.size(); ccc++)
        {

                int                                                                                       modelID, fingID, globalFingID;
                skinTouch_fingID_2_globalFingID( myTouchCorrespSKIN[ccc].source.dominantSkinningBoneName, modelID, fingID, globalFingID );

                ///////////////////////////////////////////////////////////////////////////
                ///////////////////////////////////////////////////////////////////////////
                touchingFinger_COUNTer[globalFingID].counter++;
                ///////////////////////////////////////////////
                ///////////////////////////////////////////////
                touchingFinger_COUNTer[globalFingID].modelID           = modelID;
                touchingFinger_COUNTer[globalFingID].fingID            = fingID;
                touchingFinger_COUNTer[globalFingID].globalFingID      = globalFingID;
                touchingFinger_COUNTer[globalFingID].name_skinningBone = myTouchCorrespSKIN[ccc].source.dominantSkinningBoneName;
                touchingFinger_COUNTer[globalFingID].skinningBoneID    = myTouchCorrespSKIN[ccc].source.dominantSkinningBoneID;
                touchingFinger_COUNTer[globalFingID].signedDist       += myTouchCorrespSKIN[ccc].source.distanceToPrimitive_Signed;
                ///////////////////////////////////////////////////////////////////////////
                ///////////////////////////////////////////////////////////////////////////

        }

        for (int globalFingID=0; globalFingID<touchingFinger_COUNTer.size(); globalFingID++)
        {
            touchingFinger_COUNTer[globalFingID].signedDist /= (double)touchingFinger_COUNTer[globalFingID].counter;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                    int                                             returnCOUNT = 0;
        for (int iii=0; iii<touchingFinger_COUNTer.size(); iii++)   if (touchingFinger_COUNTer[iii].counter > 0)    returnCOUNT++;
                                                                    return                                          returnCOUNT;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}


int Touch::skinTouch_countDiffFingers_PER_ANIM( int animID )
{

        /////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////
        for (int iii=0; iii<touchingFinger_COUNTer.size(); iii++)
        {
            touchingFinger_COUNTer[iii].counter           =  0;
            touchingFinger_COUNTer[iii].fingID            = -1;
            touchingFinger_COUNTer[iii].globalFingID      = -1;
            touchingFinger_COUNTer[iii].modelID           = -1;
            touchingFinger_COUNTer[iii].name_skinningBone = "";
            touchingFinger_COUNTer[iii].skinningBoneID    = -1;
            touchingFinger_COUNTer[iii].signedDist        =  0;
        }
        /////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////


        /////////////////////////////////////////////////////////////
        Animation *pAnimation = &(sequence->posedAnimations[animID]);
        /////////////////////////////////////////////////////////////


        for (int ttt=0; ttt<pAnimation->touchingVertices.size(); ttt++)
        {

                int                                                                                          modelID, fingID, globalFingID;
                skinTouch_fingID_2_globalFingID( pAnimation->touchingVertices[ttt].dominantSkinningBoneName, modelID, fingID, globalFingID);

                ///////////////////////////////////////////////////////////////////////////
                ///////////////////////////////////////////////////////////////////////////
                touchingFinger_COUNTer[globalFingID].counter++;
                ///////////////////////////////////////////////
                ///////////////////////////////////////////////
                touchingFinger_COUNTer[globalFingID].modelID           = modelID;
                touchingFinger_COUNTer[globalFingID].fingID            = fingID;
                touchingFinger_COUNTer[globalFingID].globalFingID      = globalFingID;
                touchingFinger_COUNTer[globalFingID].name_skinningBone = pAnimation->touchingVertices[ttt].dominantSkinningBoneName;
                touchingFinger_COUNTer[globalFingID].skinningBoneID    = pAnimation->touchingVertices[ttt].dominantSkinningBoneID;
                touchingFinger_COUNTer[globalFingID].signedDist       += pAnimation->touchingVertices[ttt].distanceToPrimitive_Signed;
                ///////////////////////////////////////////////////////////////////////////
                ///////////////////////////////////////////////////////////////////////////

        } // ttt

        for (int globalFingID=0; globalFingID<touchingFinger_COUNTer.size(); globalFingID++)
        {
            touchingFinger_COUNTer[globalFingID].signedDist /= (double)touchingFinger_COUNTer[globalFingID].counter;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                    int                                     returnCOUNT = 0;
        for (int iii=0; iii<touchingFinger_COUNTer.size(); iii++)   if (skinTouch_isFingerInTouch(iii))     returnCOUNT++;
                                                                    return                                  returnCOUNT;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}



void Touch::skinTouch_fingID_2_globalFingID( const QString& boneName, int& modelID, int& fingID, int& globalFingID )
{
        /////////////////////////////////////        /////////////////////////////////////
        /////////////////////////////////////        /////////////////////////////////////   touchingFinger_COUNTer
        //  0  1  2  3  4    5  6  7  8  9 //        //  0  1  2  3  4    5  6  7  8  9 //
        //---------------------------------//        //---------------------------------//
        // R0 R1 R2 R3 R4   L0 L1 L2 L3 L4 //   OR   // L0 L1 L2 L3 L4   R0 R1 R2 R3 R4 //
        /////////////////////////////////////        /////////////////////////////////////
        /////////////////////////////////////        /////////////////////////////////////

        int     fingerNumber = boneName.mid(6,1).toInt();
        QString fingerLetter = boneName.mid(0,1);

        for (modelID=0; modelID<sequence->posedAnimations[0].modelSet.models.size(); modelID++)
        {
            if ( sequence->posedAnimations[0].modelSet.models[modelID].name.contains("Hand") && sequence->posedAnimations[0].modelSet.models[modelID].name.contains(fingerLetter) ) // "R" "L"
            {
                break; // it will remember **modelID**
            }
        }
        //////////////////////////////////////////
              fingID = fingerNumber;
        globalFingID = fingerNumber + modelID * 5;
        //////////////////////////////////////////
}



bool Touch::skinTouch_isFingerInTouch( const int& globalFingID )
{
    return ( touchingFinger_COUNTer[globalFingID].counter >= PARAM_SKIN_minTouchingPointsPerFinger );
}



QString Touch::skinTouch_printTouchingFingers()
{
    QString OUTstring = "";

    for (int iii=0; iii<touchingFinger_COUNTer.size(); iii++)
    {
        if (skinTouch_isFingerInTouch(iii))
        {
            OUTstring += touchingFinger_COUNTer[iii].name_skinningBone + "\t\t";
        }
    }

    return OUTstring;
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void Touch::printer_AllBones_OneAnim( int animNumb )
{

        ///////////////////////////////////////////////////////////////
        Animation* pAnimation = &(sequence->posedAnimations[animNumb]);
        ///////////////////////////////////////////////////////////////


        for (int modelID=0; modelID<pAnimation->modelSet.totalModels; modelID++)
        {

                /////////////////////////////////////////////////////////////////////////////////////////
                /////////////////////////////////////////////////////////////////////////////////////////
                Model                       *pModel            = &(pAnimation->modelSet.models[modelID]);
                SkinningBonesSkeletonStruct *pSkinningSkeleton = &(pModel->skinningSkeleton);
                /////////////////////////////////////////////////////////////////////////////////////////
                /////////////////////////////////////////////////////////////////////////////////////////


                for (int skkk=0; skkk<pModel->totalSkinningBones; skkk++)
                {

                            /////////////////////////////////////////////////////////////////////
                            /////////////////////////////////////////////////////////////////////
                            if (pModel->skinningSkeleton.skinningBones.size() == 1)     continue;
                            if (skkk == 0)                                              continue;
                            /////////////////////////////////////////////////////////////////////
                            /////////////////////////////////////////////////////////////////////


                            //////////////////////////////////////////////////////////////////////////////
                            //////////////////////////////////////////////////////////////////////////////
                            skinningBoneStruct *pSkinningBone = &(pSkinningSkeleton->skinningBones[skkk]);
                            //////////////////////////////////////////////////////////////////////////////
                            //////////////////////////////////////////////////////////////////////////////
                            std::string                                 strContact   = "";
                            std::string                                 strContactEF = "";
                            if (pSkinningBone->bone_Start_isInTouch)    strContact   = " - CONTACT";
                            if (pSkinningBone->bone_Leaff_isInTouch)    strContactEF = " - CONTACT";
                            ////////////////////////////////////////////////////////////////////////
                            ////////////////////////////////////////////////////////////////////////
                            double                                      signedDIST    = -666;
                            double                                      signedDIST_EF = -666;
                            if (pSkinningBone->bone_Start_isInTouch)    signedDIST    = pAnimation->touchingJoints[ pSkinningBone->addressSeListaTouchingJoints_Start ].distanceToPCL_Signed_Joint2PCL;
                            if (pSkinningBone->bone_Leaff_isInTouch)    signedDIST_EF = pAnimation->touchingJoints[ pSkinningBone->addressSeListaTouchingJoints_Leaff ].distanceToPCL_Signed_Joint2PCL_EF;
                            ////////////////////////////////////////////////////////////////////////
                            ////////////////////////////////////////////////////////////////////////

                            if (pSkinningBone->name.contains("_Hand"))      std::cout << "Touch::myTouchPrinter_AllBones_OneAnim" << "\t\t" << pAnimation->name.toStdString() << "\t\t" << pSkinningBone->name.toStdString() <<   "\t" << signedDIST    << "\t-----         " << strContact   << std::endl;
                            else                                            std::cout << "Touch::myTouchPrinter_AllBones_OneAnim" << "\t\t" << pAnimation->name.toStdString() << "\t\t" << pSkinningBone->name.toStdString() << "\t\t" << signedDIST    << "\t-----         " << strContact   << std::endl;
                            if (pSkinningBone->bone_Leaff_isInTouch)        std::cout << "Touch::myTouchPrinter_AllBones_OneAnim" << "\t\t" << pAnimation->name.toStdString() << "\t\t" << pSkinningBone->name.toStdString() << "\t\t" << signedDIST_EF << "\t----- End_Eff " << strContactEF << std::endl;


                } // for (int skkk=0; skkk<pModel->totalSkinningBones; skkk++)


        } // for (int modelID=0; modelID<modelSet.totalModels; modelID++)


        std::cout << std::endl << std::endl;


}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void Touch::printer_Minimal__AllAnim()
{

        std::cout << std::endl << std::endl << std::endl;


        for (int animNumb=0; animNumb<sequence->posedAnimations.size(); animNumb++)
        {

                ///////////////////////////////////////////////////////////////
                Animation* pAnimation = &(sequence->posedAnimations[animNumb]);
                ///////////////////////////////////////////////////////////////


                std::cout << std::endl;


                for (int jjj=0; jjj<pAnimation->touchingJoints.size(); jjj++)
                {

                        ///////////////////////////////////////////////////////////////////
                        TouchingJoint* pTouchingJoint = &(pAnimation->touchingJoints[jjj]);
                        ///////////////////////////////////////////////////////////////////

                        if      (pTouchingJoint->name_Bone.contains("_Hand"))    std::cout << "Touch::myTouchPrinter_Minimal__AllAnim" << "\t" << pAnimation->name.toStdString() << "\t" << pTouchingJoint->name_Bone.toStdString() <<   "\t" << pTouchingJoint->distanceToPCL_Signed_Joint2PCL    << "\t-----         \tCONTACT" << std::endl;
                        else if (pTouchingJoint->name_Bone.contains(  "_EF"))    std::cout << "Touch::myTouchPrinter_Minimal__AllAnim" << "\t" << pAnimation->name.toStdString() << "\t" << pTouchingJoint->name_Bone.toStdString() << "\t\t" << pTouchingJoint->distanceToPCL_Signed_Joint2PCL_EF << "\t----- End_Eff \tCONTACT" << std::endl;
                        else                                                     std::cout << "Touch::myTouchPrinter_Minimal__AllAnim" << "\t" << pAnimation->name.toStdString() << "\t" << pTouchingJoint->name_Bone.toStdString() << "\t\t" << pTouchingJoint->distanceToPCL_Signed_Joint2PCL    << "\t-----         \tCONTACT" << std::endl;


                } // for (int modelID=0; modelID<modelSet.totalModels; modelID++)

        }


        std::cout << std::endl << std::endl << std::endl;

}




