// Author: Dimitrios Tzionas
//
// source code for the work:
//
// Dimitrios Tzionas and Juergen Gall
// 3D Object Reconstruction from Hand-Object Interactions
// International Conference on Computer Vision (ICCV) 2015
// http://files.is.tue.mpg.de/dtzionas/In-Hand-Scanning


#include "touch.h"



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void Animation::TouchingVertices_TRASNFORM( Eigen::Matrix4f transformationMatrix4f )
{

        pcl::PointCloud<pcl::PointXYZRGBNormal>::Ptr            myTouchingVerticesPCL( new pcl::PointCloud<pcl::PointXYZRGBNormal> );

        for (int ttt=0; ttt<touchingVertices.size(); ttt++)     myTouchingVerticesPCL->push_back( touchingVertices[ttt].vertex_XYZRGBNormal );

                          //////////////////////////////////////////////////////////////////////////////////////
                          pcl::transformPointCloudWithNormals( *myTouchingVerticesPCL, /////////////////////////
                                                               *myTouchingVerticesPCL, transformationMatrix4f );
                          //////////////////////////////////////////////////////////////////////////////////////

        for (int ttt=0; ttt<touchingVertices.size(); ttt++)
        {
                touchingVertices[ttt].vertex_XYZRGBNormal = (  *myTouchingVerticesPCL)[ttt];
                touchingVertices[ttt].vertex_Eigen_Vec3f <<       touchingVertices[ttt].vertex_XYZRGBNormal.x,
                                                                  touchingVertices[ttt].vertex_XYZRGBNormal.y,
                                                                  touchingVertices[ttt].vertex_XYZRGBNormal.z;
        }

}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void Animation::TouchingVertices_PRINT()                                                            {   TouchingVertices_PRINT(   touchingVertices );   }
void Animation::TouchingVertices_PRINT_DBG( const QVector< TouchingVertex > &myTouchingVertices )   {   TouchingVertices_PRINT( myTouchingVertices );   }
void Animation::TouchingVertices_PRINT(     const QVector< TouchingVertex > &myTouchingVertices )
{

        std::cout << "\n\n\n\n" << std::endl;

        std::cout << "##################################"                   << std::endl;
        std::cout << "myTouchingVertices --> " << myTouchingVertices.size() << std::endl;
        std::cout << "##################################"                   << std::endl;


        for (int iii=0; iii<myTouchingVertices.size(); iii++)
        {
                std::cout << "\n" << "###############################################################################################################   " << iii << std::endl;
                std::cout << "\n" << "modelID                     "   << "\t" <<      myTouchingVertices[iii].modelID;
                std::cout << "\n" << "distanceToPrimitive_Signed  "   << "\t" <<      myTouchingVertices[iii].distanceToPrimitive_Signed;
                std::cout << "\n" << "addressInVertices           "   << "\t" <<      myTouchingVertices[iii].addressInVertices;
                std::cout << "\n" << "dominantSkinningBoneID      "   << "\t" <<      myTouchingVertices[iii].dominantSkinningBoneID;
                std::cout << "\n" << "dominantSkinningBoneName    "   << "\t" <<      myTouchingVertices[iii].dominantSkinningBoneName.toStdString();
                std::cout << "\n" << "vertex_Eigen_Vec3f          "   << "\t" <<      myTouchingVertices[iii].vertex_Eigen_Vec3f.transpose();
                std::cout << "\n" << "vertex_XYZRGBNormal         "   << "\t" <<      myTouchingVertices[iii].vertex_XYZRGBNormal.x           << "  "
                                                                              <<      myTouchingVertices[iii].vertex_XYZRGBNormal.y           << "  "
                                                                              <<      myTouchingVertices[iii].vertex_XYZRGBNormal.z           << "\n"
                                  << "                            "   << "\t" <<      myTouchingVertices[iii].vertex_XYZRGBNormal.normal_x    << "  "
                                                                              <<      myTouchingVertices[iii].vertex_XYZRGBNormal.normal_y    << "  "
                                                                              <<      myTouchingVertices[iii].vertex_XYZRGBNormal.normal_z    << "\n"
                                  << "                            "   << "\t" << (int)myTouchingVertices[iii].vertex_XYZRGBNormal.r           << "  "
                                                                              << (int)myTouchingVertices[iii].vertex_XYZRGBNormal.g           << "  "
                                                                              << (int)myTouchingVertices[iii].vertex_XYZRGBNormal.b           << "\n";
        }

        std::cout << "\n\n\n\n" << std::endl;

}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



int Animation::TouchingVertices_READ(     QString FULL_PATH_READ )                                                  {   return TouchingVertices_READ( FULL_PATH_READ,   touchingVertices );   }
int Animation::TouchingVertices_READ_DBG( QString FULL_PATH_READ, QVector< TouchingVertex > &myTouchingVertices )   {   return TouchingVertices_READ( FULL_PATH_READ, myTouchingVertices );   }
int Animation::TouchingVertices_READ(     QString FULL_PATH_READ, QVector< TouchingVertex > &myTouchingVertices )
{

        std::string inputString;
        int         inputInt;

        std::ifstream   streamREAD(                FULL_PATH_READ.toStdString().data()   );

                    if (streamREAD.is_open() == false)
                    {
                        std::cout << "\n\n" << "Animation::TouchingVertices_READ - could not open file - " << FULL_PATH_READ.toStdString() << "\n" << std::endl;
                        exit(1);
                    }

                        streamREAD >> inputInt;                                     myTouchingVertices.clear();
                                                                                    myTouchingVertices.resize( inputInt );


        for (int iii=0; iii<myTouchingVertices.size(); iii++)
        {
                        streamREAD >> inputString;      streamREAD >> inputInt;
                        streamREAD >> inputString;      streamREAD >>               myTouchingVertices[iii].modelID;
                        streamREAD >> inputString;      streamREAD >>               myTouchingVertices[iii].distanceToPrimitive_Signed;
                        streamREAD >> inputString;      streamREAD >>               myTouchingVertices[iii].addressInVertices;
                        streamREAD >> inputString;      streamREAD >>               myTouchingVertices[iii].dominantSkinningBoneID;
                        streamREAD >> inputString;      streamREAD >> inputString;  myTouchingVertices[iii].dominantSkinningBoneName = QString::fromStdString( inputString );
                        streamREAD >> inputString;      streamREAD >>               myTouchingVertices[iii].vertex_Eigen_Vec3f(0);
                                                        streamREAD >>               myTouchingVertices[iii].vertex_Eigen_Vec3f(1);
                                                        streamREAD >>               myTouchingVertices[iii].vertex_Eigen_Vec3f(2);
                        streamREAD >> inputString;      streamREAD >>               myTouchingVertices[iii].vertex_XYZRGBNormal.x;
                                                        streamREAD >>               myTouchingVertices[iii].vertex_XYZRGBNormal.y;
                                                        streamREAD >>               myTouchingVertices[iii].vertex_XYZRGBNormal.z;
                                                        streamREAD >>               myTouchingVertices[iii].vertex_XYZRGBNormal.normal_x;
                                                        streamREAD >>               myTouchingVertices[iii].vertex_XYZRGBNormal.normal_y;
                                                        streamREAD >>               myTouchingVertices[iii].vertex_XYZRGBNormal.normal_z;
                                                        streamREAD >> inputInt;     myTouchingVertices[iii].vertex_XYZRGBNormal.r = inputInt;
                                                        streamREAD >> inputInt;     myTouchingVertices[iii].vertex_XYZRGBNormal.g = inputInt;
                                                        streamREAD >> inputInt;     myTouchingVertices[iii].vertex_XYZRGBNormal.b = inputInt;
        }
                        streamREAD.close();

                        return myTouchingVertices.size();
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void Animation::TouchingVertices_WRITE( QString FULL_PATH_SAVE )
{

        std::ofstream   streamWRITE(            FULL_PATH_SAVE.toStdString().data()   );

                        streamWRITE << touchingVertices.size();
                        streamWRITE << "\n\n\n";

        for (int iii=0; iii<touchingVertices.size(); iii++)
        {
                                                ///////////////////////////////////////////////////////
                                                int  modelID = touchingVertices[iii].modelID;
                                                int vertexID = touchingVertices[iii].addressInVertices;
                                                ///////////////////////////////////////////////////////

                        streamWRITE << "\n" << "###############################################################################################################   " << iii << std::endl;
                        streamWRITE << "\n" << "modelID                        "   << "\t" <<      touchingVertices[iii].modelID;
                        streamWRITE << "\n" << "distanceToPrimitive_Signed     "   << "\t" <<      touchingVertices[iii].distanceToPrimitive_Signed;
                        streamWRITE << "\n" << "addressInVertices              "   << "\t" <<      touchingVertices[iii].addressInVertices;
                        streamWRITE << "\n" << "dominantSkinningBoneID         "   << "\t" <<      touchingVertices[iii].dominantSkinningBoneID;
                        streamWRITE << "\n" << "dominantSkinningBoneName       "   << "\t" <<      touchingVertices[iii].dominantSkinningBoneName.toStdString();
                        streamWRITE << "\n" << "vertex_Eigen_Vec3f             "   << "\t" <<      touchingVertices[iii].vertex_Eigen_Vec3f.transpose();
                        streamWRITE << "\n" << "vertex_XYZRGBNormal            "   << "\t" <<      touchingVertices[iii].vertex_XYZRGBNormal.x                 << "  "
                                                                                           <<      touchingVertices[iii].vertex_XYZRGBNormal.y                 << "  "
                                                                                           <<      touchingVertices[iii].vertex_XYZRGBNormal.z                 << "\n"
                                            << "                               "   << "\t" <<      touchingVertices[iii].vertex_XYZRGBNormal.normal_x          << "  "
                                                                                           <<      touchingVertices[iii].vertex_XYZRGBNormal.normal_y          << "  "
                                                                                           <<      touchingVertices[iii].vertex_XYZRGBNormal.normal_z          << "\n"
                                            << "                               "   << "\t" << (int)touchingVertices[iii].vertex_XYZRGBNormal.r                 << "  "
                                                                                           << (int)touchingVertices[iii].vertex_XYZRGBNormal.g                 << "  "
                                                                                           << (int)touchingVertices[iii].vertex_XYZRGBNormal.b                 << "\n";
        }

                        streamWRITE.close();

}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


