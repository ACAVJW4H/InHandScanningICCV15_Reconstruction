// Author: Dimitrios Tzionas
//
// source code for the work:
//
// Dimitrios Tzionas and Juergen Gall
// 3D Object Reconstruction from Hand-Object Interactions
// International Conference on Computer Vision (ICCV) 2015
// http://files.is.tue.mpg.de/dtzionas/In-Hand-Scanning


#include <registrator.h>




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void Registrator::touchFrames_from_touchIndices_COMPUTE()
{
    PARAM_INDEX_List.frames.clear();

    for (int pairID=0; pairID<PARAM_INDEX_List.indexPairs.size(); pairID++)
    {
        int STARTTT_fileID = PARAM_INDEX_List.indexPairs[ pairID ].STARTTT_fileID;
        int ENDDDDD_fileID = PARAM_INDEX_List.indexPairs[ pairID ].ENDDDDD_fileID;

        for (int fileID=STARTTT_fileID; fileID<=ENDDDDD_fileID; fileID++)
        {
            PARAM_INDEX_List_ELEMENT_Frame  frameTMP;
                                            frameTMP.pairID    =  pairID;
                                            frameTMP.fileID    =  fileID;
                                            frameTMP.listID    =  PARAM_INDEX_List.frames.size();
                                            frameTMP.isSTARTTT = (fileID==STARTTT_fileID);
                                            frameTMP.isENDDDDD = (fileID==ENDDDDD_fileID);
            PARAM_INDEX_List.frames.append( frameTMP );
        }
    }
}



void Registrator::touchFrames_PRINT()
{
    std::cout << "\n\n" << std::endl;

    std::cout << "PARAM_INDEX_List.frames.size() =  " << PARAM_INDEX_List.frames.size() << std::endl;

    std::cout << "\n\n" << std::endl;

    for (int frameID=0; frameID<PARAM_INDEX_List.frames.size(); frameID++)
    {
        int    pairID = PARAM_INDEX_List.frames[ frameID ].pairID;
        int    fileID = PARAM_INDEX_List.frames[ frameID ].fileID;
        int    listID = PARAM_INDEX_List.frames[ frameID ].listID;
        int isSTARTTT = PARAM_INDEX_List.frames[ frameID ].isSTARTTT;
        int isENDDDDD = PARAM_INDEX_List.frames[ frameID ].isENDDDDD;

        int STARTTT_fileID = PARAM_INDEX_List.indexPairs[ pairID ].STARTTT_fileID;
        int ENDDDDD_fileID = PARAM_INDEX_List.indexPairs[ pairID ].ENDDDDD_fileID;

        std::cout<< QString::number( listID ).rightJustified(fileNamePADDING,'0',false).toStdString() << "  \t"
                 << QString::number( fileID ).rightJustified(fileNamePADDING,'0',false).toStdString();

        if      (fileID==STARTTT_fileID)   std::cout << "  \t" << "STARTTT" << "  \t" << QString::number( pairID ).rightJustified(2,'0',false).toStdString() << "  \t" << isSTARTTT             << std::endl;
        else if (fileID==ENDDDDD_fileID)   std::cout << "  \t" << "ENDDDDD" << "  \t" << QString::number( pairID ).rightJustified(2,'0',false).toStdString() << "  \t" << isENDDDDD<< "\n\n"    << std::endl;
        else                               std::cout << "  \t" << "       " << "  \t" << QString::number( pairID ).rightJustified(2,'0',false).toStdString() << "  \t" <<(isENDDDDD||isSTARTTT) << std::endl;
    }
    std::cout << "\n\n" << std::endl;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Registrator::touchIndices_READ( QString FULL_PATH )
{
    std::string inputSTRING;
    int         inputINT;

    std::ifstream   streamREAD(  FULL_PATH.toStdString().data() );

    streamREAD >> inputINT;                           PARAM_INDEX_List.indexPairs.resize( inputINT );

    for (int pairID=0; pairID<PARAM_INDEX_List.indexPairs.size(); pairID++)
    {
        streamREAD >> inputSTRING;      streamREAD >> PARAM_INDEX_List.indexPairs[ pairID ].STARTTT_fileID;
        streamREAD >> inputSTRING;      streamREAD >> PARAM_INDEX_List.indexPairs[ pairID ].ENDDDDD_fileID;
    }

    streamREAD.close();
}



void Registrator::touchIndices_PRINT()
{
    std::cout << "\n\n";

    for (int pairID=0; pairID<PARAM_INDEX_List.indexPairs.size(); pairID++)
    {
        std::cout << "indexPairs["+QString::number( pairID ).toStdString()+"].STARTTT_fileID = " << PARAM_INDEX_List.indexPairs[ pairID ].STARTTT_fileID << std::endl;
        std::cout << "indexPairs["+QString::number( pairID ).toStdString()+"].ENDDDDD_fileID = " << PARAM_INDEX_List.indexPairs[ pairID ].ENDDDDD_fileID << std::endl;

        if (pairID != PARAM_INDEX_List.indexPairs.size()-1)      std::cout << "\n\n";
    }

    std::cout << "\n\n";

}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


